{% block modal %}
	<div class="modal fade" id="addedit-modal" tabindex="-1" role="dialog" aria-labelledby="modal-addedit-header" aria-hidden="true" data-backdrop="static">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<button type="button" class="close" data-dismiss="modal" aria-label="{{ 'Close'|trans }}"><span aria-hidden="true">&times;</span></button>
					<h4 class="modal-title" id="modal-addedit-header"></h4>
				</div>
				<div class="modal-body">
					{{ form_widget(form) }}
				</div>
				<div class="modal-footer">
					<button id="submit-data" class="btn btn-primary pull-right col-sm-3">{{ 'Save'|trans }}</button>
				</div>
				</div>
			</div>
		</div>
	</div>
{% endblock %}

{% block javascripts %}

$("#addedit-modal").on('show.bs.modal', function(event){
	var _id = null;
	var _rt = $(event.relatedTarget);
	_id = _rt.data("row-id");

	{# add form case #}
	if(_rt.hasClass('addaction')) {
		$("#modal-addedit-header")
           .text("{{ 'Add'|trans ~ ' ' ~ 'new menu'|trans }}");
        $("#submit-data").parent().show();
	}

	{# edit form case #}
	if(_rt.hasClass('editaction')) {
		$("#modal-addedit-header")
	       .text("{{ 'Edit'|trans ~ ' ' ~ 'menu'|trans }} - id::" +  _id );

		var url = "{{ path(edit_fetch_route, {'id':'replace_this_id_slug'}) }}";
		url = url.replace(/(replace_this_id_slug)/, _id);

		$.ajax({
			    method: "POST",
			    url: url
			}).done(function(data){
				var fetched_data = JSON.parse(data);
				for(prop in fetched_data) {
					if("id" != prop){
						$("#form_"+prop).val(fetched_data[prop]);
					}
				}
			});

	    $("#submit-data").parent().hide();

		{# fetch data from entity/local ?!? #}

	}

	{# validate on change #}
	$("#form").find("select, textarea, input").bind("change", function() {
		$this = $(this);

		{# if input type is radio or checkbox serialize form manualy #}
		if("checkbox" == $this.prop('type') || "radio" == $this.prop('type')) {
			$form_el = this.name + "=" + (this.checked ? 1 : 0);
		} else {
			$form_el = $this.serialize();
		}

		{# on EDIT CASE manualy add record id #}
		if(null != _id) {
			$form_el += encodeURIComponent("&form[id]=" + _id);
		}

		$.ajax({
				method: "POST",
				url : "{{ path(edit_action_route) }}",
				data: $form_el
		}).done(function(data){
			if('' == data) {
				$this.removeClass('yield-parent');
				$this.next('p').remove();
				if(null == _id) {
					$("#submit-data").prop('disabled', false);
				}
			} else {
				$this.addClass('yield-parent');
				if( 0 == $this.next('p').length ) {
					$this.parent().append('<p class="yield"></p>');
				}
				$this.next('p').text(data);
				if(null == _id) {
					$("#submit-data").prop('disabled', true);
				}
			}
		});
	});
});

$("#submit-data").on('click', function(e){
		{# serialize the form or div #}
		$form = $("#form");

		{# ================================ #}
		{# VALIDATE THE REQUIRED PROPRETIES #}
		{# ================================ #}

		var formElements = $form.find("select, textarea, input");
		var _serializedForm = formElements.serialize();
		var required = formElements.filter("[required]:visible");

		var requiredEmptyExists = false;

		if(0 != required.lenght){
			{# check ONLY for NONempty required #}
			required.each(function(event){
				$this = $(this);
				if( "" == $this.val() ) {
					{# add new warning but check first it not exists #}
					if(!$this.hasClass('yield-parent')){
						$this.addClass('yield-parent');
						$this.parent()
						 	 .append('<p class="yield">{{ "This field is required!"|trans }}</p>');
					}
					requiredEmptyExists = true;
				} else {
					{# remove the warnings #}
					$this.removeClass('yield-parent');
					$this.parent().find('p').remove();
				}
			});
		}

		{# if required exists, just DIE #}
		if(requiredEmptyExists) {
			return;
		} else {
			{# eliminate empty fields #}
			{# $form = $form.replace(/[^&]+=&/g, '').replace(/&[^&]+=$/g, '');	#}
			$.ajax({
				method: "POST",
				url : "{{ path(add_action_route) }}",
				data: _serializedForm
			}).done(function(){
				$("#addedit-modal").hide();
			});
		}
	});


{# GREAT BUT UNUSED BECAUSE I FORGOT about jquery serialize :( #}
{#
function getFields(actionType, editId)
{
	var fields_value = [];
	$("[id^=form_]").each(function(){
		var obj = {};
		$this=$(this);
		var myValue = $this.val() || null;
		var p = $this.prop('name');
		var re = /[^[\]]+(?=])/g;
		// var key = "set"+
		//		  p.match(re)[0].charAt(0).toUpperCase()+
		//		  p.match(re)[0].slice(1);
		var re = p.match(re)[0];

		if("edit" == actionType) {
			obj['id'] = editId;
			fields_value.push(obj);
		}

		if("text" == $this.prop('type')) {
			obj[key] = myValue;
			fields_value.push(obj);
		}

		if("select-one" == $this.prop('type')) {
			var myValue = $("option:selected", this).val() || null;
			obj[key] = myValue;
			fields_value.push(obj);
		}

		if("checkbox" == $this.prop('type')) {
			if($this.prop("checked")) {
				myValue = 1;
			} else {
				myValue = 0;
			}
			obj[key] = myValue;
			fields_value.push(obj);
		}

	});

	fields_value = JSON.stringify(fields_value);

	return fields_value;
}
#}

{# Reload page on exit #}
$('#addedit-modal').on('hidden.bs.modal', function () {
	location.reload();
})

{% endblock %}